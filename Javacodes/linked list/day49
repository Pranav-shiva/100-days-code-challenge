//  insertion Sorton a doubly linked list
//input: 8 1 10 25 31 19
//output: 1 8 10 19 25 31
class LinkedList
{

static class Node
{
	int data;
	Node prev, next;
};

static Node getN(int data)
{
	Node newNode = new Node();
	newNode.data = data;
	newNode.prev = newNode.next = null;
	return newNode;
}
static Node sortedInsert(Node head_ref, Node newNode)
{
	Node current;

	if (head_ref == null)
		head_ref = newNode;
	else if ((head_ref).data >= newNode.data)
	{
		newNode.next = head_ref;
		newNode.next.prev = newNode;
		head_ref = newNode;
	}

	else
	{
		current = head_ref;

		
		while (current.next != null &&
			current.next.data < newNode.data)
			current = current.next;
		newNode.next = current.next;
		if (current.next != null)
			newNode.next.prev = newNode;

		current.next = newNode;
		newNode.prev = current;
	}
	return head_ref;
}
static Node insertionSort(Node head_ref)
{
	Node sorted = null;
	Node current = head_ref;
	while (current != null)
	{
		Node next = current.next;
		current.prev = current.next = null;
		sorted=sortedInsert(sorted, current);
		current = next;
	}
	head_ref = sorted;
	
	return head_ref;
}
static void printList(Node head)
{
	while (head != null)
	{
		System.out.print(head.data + " ");
		head = head.next;
	}
}
static Node push(Node head_ref, int new_data)
{
	Node new_node = new Node();
	new_node.data = new_data;
	new_node.next = (head_ref);
	new_node.prev = null;
	if ((head_ref) != null)
		(head_ref).prev = new_node;
	(head_ref) = new_node;
	
	return head_ref;
}

public static void main(String args[])
{
	Node head = null;
	head=push(head, 19);
	head=push(head, 31);
	head=push(head, 25);
	head=push(head, 10);
	head=push(head, 1);
	head=push(head, 8);

	System.out.println( "Doubly Linked List Before Sorting\n");
	printList(head);

	head=insertionSort(head);

	System.out.println("\nDoubly Linked List After Sorting\n");
	printList(head);

}
}




